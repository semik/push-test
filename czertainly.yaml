---
# Source: czertainly/charts/apiGateway/templates/rbac/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway-sa
  labels:
    helm.sh/chart: apiGateway-3.8.0-develop
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: czertainly/charts/messagingService/templates/rbac/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: messaging-rabbitmq-sa
  labels:
    helm.sh/chart: messagingService-3.12.1-4-develop
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.12.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: czertainly/templates/rbac/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: czertainly-sa
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: czertainly/charts/authService/templates/auth-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  connection-string: SG9zdD1sYWIwOS4za2V5LmNvbXBhbnk7UG9ydD01NDMyO1VzZXJuYW1lPWV4YW1wbGVfY3plcnRhaW5seTtQYXNzd29yZD1iZXppbGlza2FrdGFib3J1MDYxMjIwMjQ7RGF0YWJhc2U9ZXhhbXBsZV9jemVydGFpbmx5O1Bvb2xpbmc9dHJ1ZQ==
kind: Secret
metadata:
  name: auth-secret
---
# Source: czertainly/charts/cryptosenseDiscoveryProvider/templates/cryptosense-discovery-provider-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  password: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
  username: "ZXhhbXBsZV9jemVydGFpbmx5"
kind: Secret
metadata:
  name: cryptosense-discovery-provider-secret
---
# Source: czertainly/charts/ctLogsDiscoveryProvider/templates/hashicorp-vault-connector-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  database_host: "bGFiMDkuM2tleS5jb21wYW55"
  database_port: "NTQzMg=="
  database_name: "ZXhhbXBsZV9jemVydGFpbmx5"
  database_user: "ZXhhbXBsZV9jemVydGFpbmx5"
  database_password: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
kind: Secret
metadata:
  name: ct-logs-discovery-provider-secret
---
# Source: czertainly/charts/keycloakInternal/templates/keycloak-internal-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  database_host: "bGFiMDkuM2tleS5jb21wYW55"
  database_port: "NTQzMg=="
  database_name: "ZXhhbXBsZV9jemVydGFpbmx5"
  database_user: "ZXhhbXBsZV9jemVydGFpbmx5"
  database_password: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
  username: "YWRtaW4="
  password: "YWRtaW4="
kind: Secret
metadata:
  name: keycloak-internal-secret
---
# Source: czertainly/charts/keystoreEntityProvider/templates/keystore-entity-provider-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  password: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
  username: "ZXhhbXBsZV9jemVydGFpbmx5"
kind: Secret
metadata:
  name: keystore-entity-provider-secret
---
# Source: czertainly/charts/networkDiscoveryProvider/templates/network-discovery-provider-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  password: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
  username: "ZXhhbXBsZV9jemVydGFpbmx5"
kind: Secret
metadata:
  name: network-discovery-provider-secret
---
# Source: czertainly/charts/pyAdcsConnector/templates/pyadcs-connector-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  database_host: "bGFiMDkuM2tleS5jb21wYW55"
  database_port: "NTQzMg=="
  database_name: "ZXhhbXBsZV9jemVydGFpbmx5"
  database_user: "ZXhhbXBsZV9jemVydGFpbmx5"
  database_password: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
kind: Secret
metadata:
  name: pyadcs-connector-secret
---
# Source: czertainly/charts/schedulerService/templates/scheduler-service-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  dbPassword: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
  dbUsername: "ZXhhbXBsZV9jemVydGFpbmx5"
  messagingPassword: "ZnhVRHhPN2x6Mm9ta0Zpd2xRd0I="
  messagingUsername: "Y3plcnRhaW5seQ=="
kind: Secret
metadata:
  name: scheduler-service-secret
---
# Source: czertainly/charts/softwareCryptographyProvider/templates/software-cryptography-provider-secret.yaml
apiVersion: v1
data:
  # if the global values are defined, use it, otherwise use local values
  password: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
  username: "ZXhhbXBsZV9jemVydGFpbmx5"
kind: Secret
metadata:
  name: software-cryptography-provider-secret
---
# Source: czertainly/templates/admin/admin-certificate-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: admin-certificate-secret
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV0RENDQXB5Z0F3SUJBZ0lWQVAxNWtWdDYybThhNHA1MnhtYkNjTkNpU3g4cU1BMEdDU3FHU0liM0RRRUIKRFFVQU1DTXhJVEFmQmdOVkJBTU1HRU5hUlZKVVFVbE9URmtnUkhWdGJYa2dVbTl2ZENCRFFUQWVGdzB5TWpBNApNRFF3T0RFek16RmFGdzAwTWpBM016QXdPREV6TXpGYU1DTXhJVEFmQmdOVkJBTU1HRU5hUlZKVVFVbE9URmtnClFXUnRhVzVwYzNSeVlYUnZjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFML1AKV29KTjJpZURaa3AxSmdnclhqaERtL3hycVg2YWNBbXlxekJRdWpDVXJiakZGOGwxcWR0STBmWnlGclpCTGVWSApDd3FRVXowQWZqemo3RkJNTlAybGpWTHJRYk1meWpKRzEwTnZ1UE9hOWRQL1ZvbGdGNENSUmcwRWJnNUNDZDBzCjN5WlIvZ0ljNmNsOXgwUnVrOHVSQ3BNNGpaN1krLzdqaGY0K2M4bUJscDJhUmxBSnRWM0pPWVFsdXgxN0lwSmQKSnJuZ1gvbEtvWmNwNHpVOWtRd3VuVnh6NUdCV2hYR3FNRWNWNmI3bEdGNW9jU2xuclIzY1VLWmJkR2JYY2ZLNwo1K1c0L0xCNnY2eTliUjQwUitJVWQvbU91QnlRdnFXeVRDazVkMllXQm1nL2RkUFZGeW5iNWEyK3hqaEp4QkkrCjI4aUdYcTZpcm9RclBvdWFjdjhDQXdFQUFhT0IzakNCMnpBTUJnTlZIUk1CQWY4RUFqQUFNQTRHQTFVZER3RUIKL3dRRUF3SUY0REFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQWpBZEJnTlZIUTRFRmdRVXJVT3oydjBFdkJTSAp5ZW1HWFBudDdIYWdoQmd3SHdZRFZSMGpCQmd3Rm9BVTAvQk5WanJtb0Q4WFcvTlZYZW94VElrRDU5WXdaZ1lEClZSMGdCRjh3WFRCYkJnUlZIU0FBTUZNd1VRWUlLd1lCQlFVSEFnSXdSUnBEVlZSR09EcFVhR2x6SUdseklHRWcKWkhWdGJYa2dZV1J0YVc1cGMzUnlZWFJ2Y2lCalpYSjBhV1pwWTJGMFpTQm1iM0lnZEdWemRHbHVaeUJ3ZFhKdwpiM05sY3pBTkJna3Foa2lHOXcwQkFRMEZBQU9DQWdFQVdZbHBFSThTQ09uaEtZcGNwM24rQnRhQW9VcmN3SWNrCnB6UFB4TmYrOUxTS2hQcDRORXMrRUdzZmZsejMzSWVFb2pjayt4L3dCcWdnSmRwN1dyVXNIei8wc0F3Q2tyVmoKYmgzTHg3NW1zQXFWcUZVYVgwZ1licXN0bWJuSHhxZ2Ntc2VWa1dtRUhFT21kejArL0IwWHJHYWd6UU5XOEVHVwozUEV2NHlPQ2VxZGdSdDlOeWgrR1V0VmthdnkrQ2tZUmFJRUhER2p0eEpUTWFrWE9hRVUwdE5tRG9NQkRRekxzCnFjNzVBWUVlcWxLdlFzNnZaSUNmK1JsdERhRGdyaVNlbEUwNFB0am5JcjZhS21XaXBGTjJXdThaZ2kzcXQ3U1MKaU13azBPSXZHNE5Ha09LY2tmNWtSV2xBNmFMdGtZMkFCSE9ia25JbEpoZnBVL3NOTi81bWEwYytyU1hLMitQeQpEU3R4QUxNek01NEdWZkdwWG1kUjNma0VROG1TMzVCVTJsOEdwMG1BL1hpNTVlcVdWWGd4RURYcGg0ODdPMjBICmpHaCt4SGNJNDBaT2JCSUt2ZkQwa0NpMXNRY0lOcEs2Q0dtMEpiMW9qVSt4RndncTJJaGRKUHJDN3F1RVczd0UKSENSUUtHYVRiU202Q2ZNZGYzWU9LZ3BJVXJYNURhMndKTjA0UlRPTHhVdnBRc3MvcnVwNDlVcTJwTUdCUHRBdgp0VHpYeVRKcncyMmJnQmpKVitqdDYwWkIwUFZxUmJhUGE1MmhVTWw3ZXdDR3BWTzJCeUFjeG9RMStFbmIyOC9TCndEblczcmdzYUNIT0IwQXpxemFRQXdFYmdBZVVLREJ4S3dtMEdxTElnTXRHczdDYUc1OC9LcVpzTWo4QURxcUkKdFkzWFhBbGhqYjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV0RENDQXB5Z0F3SUJBZ0lWQVAxNWtWdDYybThhNHA1MnhtYkNjTkNpU3g4cU1BMEdDU3FHU0liM0RRRUIKRFFVQU1DTXhJVEFmQmdOVkJBTU1HRU5hUlZKVVFVbE9URmtnUkhWdGJYa2dVbTl2ZENCRFFUQWVGdzB5TWpBNApNRFF3T0RFek16RmFGdzAwTWpBM016QXdPREV6TXpGYU1DTXhJVEFmQmdOVkJBTU1HRU5hUlZKVVFVbE9URmtnClFXUnRhVzVwYzNSeVlYUnZjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFML1AKV29KTjJpZURaa3AxSmdnclhqaERtL3hycVg2YWNBbXlxekJRdWpDVXJiakZGOGwxcWR0STBmWnlGclpCTGVWSApDd3FRVXowQWZqemo3RkJNTlAybGpWTHJRYk1meWpKRzEwTnZ1UE9hOWRQL1ZvbGdGNENSUmcwRWJnNUNDZDBzCjN5WlIvZ0ljNmNsOXgwUnVrOHVSQ3BNNGpaN1krLzdqaGY0K2M4bUJscDJhUmxBSnRWM0pPWVFsdXgxN0lwSmQKSnJuZ1gvbEtvWmNwNHpVOWtRd3VuVnh6NUdCV2hYR3FNRWNWNmI3bEdGNW9jU2xuclIzY1VLWmJkR2JYY2ZLNwo1K1c0L0xCNnY2eTliUjQwUitJVWQvbU91QnlRdnFXeVRDazVkMllXQm1nL2RkUFZGeW5iNWEyK3hqaEp4QkkrCjI4aUdYcTZpcm9RclBvdWFjdjhDQXdFQUFhT0IzakNCMnpBTUJnTlZIUk1CQWY4RUFqQUFNQTRHQTFVZER3RUIKL3dRRUF3SUY0REFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQWpBZEJnTlZIUTRFRmdRVXJVT3oydjBFdkJTSAp5ZW1HWFBudDdIYWdoQmd3SHdZRFZSMGpCQmd3Rm9BVTAvQk5WanJtb0Q4WFcvTlZYZW94VElrRDU5WXdaZ1lEClZSMGdCRjh3WFRCYkJnUlZIU0FBTUZNd1VRWUlLd1lCQlFVSEFnSXdSUnBEVlZSR09EcFVhR2x6SUdseklHRWcKWkhWdGJYa2dZV1J0YVc1cGMzUnlZWFJ2Y2lCalpYSjBhV1pwWTJGMFpTQm1iM0lnZEdWemRHbHVaeUJ3ZFhKdwpiM05sY3pBTkJna3Foa2lHOXcwQkFRMEZBQU9DQWdFQVdZbHBFSThTQ09uaEtZcGNwM24rQnRhQW9VcmN3SWNrCnB6UFB4TmYrOUxTS2hQcDRORXMrRUdzZmZsejMzSWVFb2pjayt4L3dCcWdnSmRwN1dyVXNIei8wc0F3Q2tyVmoKYmgzTHg3NW1zQXFWcUZVYVgwZ1licXN0bWJuSHhxZ2Ntc2VWa1dtRUhFT21kejArL0IwWHJHYWd6UU5XOEVHVwozUEV2NHlPQ2VxZGdSdDlOeWgrR1V0VmthdnkrQ2tZUmFJRUhER2p0eEpUTWFrWE9hRVUwdE5tRG9NQkRRekxzCnFjNzVBWUVlcWxLdlFzNnZaSUNmK1JsdERhRGdyaVNlbEUwNFB0am5JcjZhS21XaXBGTjJXdThaZ2kzcXQ3U1MKaU13azBPSXZHNE5Ha09LY2tmNWtSV2xBNmFMdGtZMkFCSE9ia25JbEpoZnBVL3NOTi81bWEwYytyU1hLMitQeQpEU3R4QUxNek01NEdWZkdwWG1kUjNma0VROG1TMzVCVTJsOEdwMG1BL1hpNTVlcVdWWGd4RURYcGg0ODdPMjBICmpHaCt4SGNJNDBaT2JCSUt2ZkQwa0NpMXNRY0lOcEs2Q0dtMEpiMW9qVSt4RndncTJJaGRKUHJDN3F1RVczd0UKSENSUUtHYVRiU202Q2ZNZGYzWU9LZ3BJVXJYNURhMndKTjA0UlRPTHhVdnBRc3MvcnVwNDlVcTJwTUdCUHRBdgp0VHpYeVRKcncyMmJnQmpKVitqdDYwWkIwUFZxUmJhUGE1MmhVTWw3ZXdDR3BWTzJCeUFjeG9RMStFbmIyOC9TCndEblczcmdzYUNIT0IwQXpxemFRQXdFYmdBZVVLREJ4S3dtMEdxTElnTXRHczdDYUc1OC9LcVpzTWo4QURxcUkKdFkzWFhBbGhqYjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
# Source: czertainly/templates/core-secret.yaml
apiVersion: v1
data:
  jdbcPassword: "YmV6aWxpc2tha3RhYm9ydTA2MTIyMDI0"
  jdbcUsername: "ZXhhbXBsZV9jemVydGFpbmx5"
kind: Secret
metadata:
  name: core-secret
---
# Source: czertainly/templates/global-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: global-secret
stringData:  
  messaging.username: "czertainly"
  messaging.password: "fxUDxO7lz2omkFiwlQwB"
  messaging.cookie: "leDG82SeM5CF4aCifd8NApLBUFUitvId"
  messaging.definitions.json: |
    {
      "users": [
        {
          "name": "czertainly",
          "password": "fxUDxO7lz2omkFiwlQwB",
          "tags": [
            "administrator"
          ],
          "limits": {}
        }
      ],
      "vhosts": [
        {
          "name": "czertainly"
        }
      ],
      "permissions": [
        {
          "user": "czertainly",
          "vhost": "czertainly",
          "configure": ".*",
          "write": ".*",
          "read": ".*"
        }
      ]
    }
---
# Source: czertainly/templates/trusted-certificates-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: trusted-certificates
type: Opaque
data:
  ca.crt: 
---
# Source: czertainly/charts/feAdministrator/templates/fe-administrator-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fe-administrator-configmap
  labels:
    helm.sh/chart: feAdministrator-2.13.1-1-develop
    app.kubernetes.io/name: fe-administrator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.13.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.js: |
    window.__ENV__ =
    {
        "API_URL": "/api",
        "LOGIN_URL": "/login",
        "LOGOUT_URL": "/logout"
    }
---
# Source: czertainly/charts/keycloakInternal/templates/keycloak-internal-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-internal-configmap
data:
  czertainly_realm.json: |-    
    {
      "id": "1595e715-e7d0-417a-8df5-77bbdde4e8d8",
      "realm": "CZERTAINLY",
      "displayName": "",
      "displayNameHtml": "",
      "notBefore": 0,
      "defaultSignatureAlgorithm": "RS256",
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "ssoSessionIdleTimeoutRememberMe": 0,
      "ssoSessionMaxLifespanRememberMe": 0,
      "offlineSessionIdleTimeout": 2592000,
      "offlineSessionMaxLifespanEnabled": false,
      "offlineSessionMaxLifespan": 5184000,
      "clientSessionIdleTimeout": 0,
      "clientSessionMaxLifespan": 0,
      "clientOfflineSessionIdleTimeout": 0,
      "clientOfflineSessionMaxLifespan": 0,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "oauth2DeviceCodeLifespan": 600,
      "oauth2DevicePollingInterval": 5,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxTemporaryLockouts": 0,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "roles": {
        "realm": [
          {
            "id": "b348ab9b-35f7-414c-970b-f1787d51df5f",
            "name": "default-roles-czertainly",
            "description": "${role_default-roles}",
            "composite": true,
            "composites": {
              "realm": [
                "offline_access",
                "uma_authorization"
              ],
              "client": {
                "account": [
                  "view-profile",
                  "manage-account"
                ]
              }
            },
            "clientRole": false,
            "containerId": "1595e715-e7d0-417a-8df5-77bbdde4e8d8",
            "attributes": {}
          },
          {
            "id": "b8b472ce-1f16-46f4-8f84-0786df9d6277",
            "name": "offline_access",
            "description": "${role_offline-access}",
            "composite": false,
            "clientRole": false,
            "containerId": "1595e715-e7d0-417a-8df5-77bbdde4e8d8",
            "attributes": {}
          },
          {
            "id": "8c96aa1b-7ba3-438b-b3c0-69c1c62da6a4",
            "name": "uma_authorization",
            "description": "${role_uma_authorization}",
            "composite": false,
            "clientRole": false,
            "containerId": "1595e715-e7d0-417a-8df5-77bbdde4e8d8",
            "attributes": {}
          }
        ],
        "client": {
          "realm-management": [
            {
              "id": "66d86496-1b80-4057-ab98-9e682584a232",
              "name": "view-identity-providers",
              "description": "${role_view-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "a50a5b53-62d2-446f-93b8-f497fff967e6",
              "name": "query-groups",
              "description": "${role_query-groups}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "c453b53c-4412-447e-bb04-4f97f8ec029d",
              "name": "manage-identity-providers",
              "description": "${role_manage-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "e243303f-8094-4e50-8780-311692e5e9a2",
              "name": "manage-clients",
              "description": "${role_manage-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "e5049965-eac6-4bfa-8fbf-aab7c82046cb",
              "name": "manage-realm",
              "description": "${role_manage-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "c07d80d1-2c5b-480a-ad30-89dd4517910f",
              "name": "query-realms",
              "description": "${role_query-realms}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "2fa14721-9aac-4fee-9f11-97b533a679fa",
              "name": "view-events",
              "description": "${role_view-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "b931f593-fb86-4a66-80f5-e90704adca02",
              "name": "impersonation",
              "description": "${role_impersonation}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "b0830574-32aa-46ef-a186-3cb08ce87ea1",
              "name": "manage-authorization",
              "description": "${role_manage-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "bbfba704-7c75-4534-9dff-32ce16255c3b",
              "name": "view-authorization",
              "description": "${role_view-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "11d7bf13-8e23-408f-9db5-558a09dedd54",
              "name": "view-clients",
              "description": "${role_view-clients}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-clients"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "b9b1e625-f2c9-4865-b0ed-125ce332d9a1",
              "name": "create-client",
              "description": "${role_create-client}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "baeee36d-52a2-4633-80f3-7cf421247cd8",
              "name": "manage-users",
              "description": "${role_manage-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "a9466dc6-6aef-4cae-a0cb-f5694f8cafd0",
              "name": "query-users",
              "description": "${role_query-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "2e9e19e6-2355-4f2c-8b7c-b7da087519f4",
              "name": "realm-admin",
              "description": "${role_realm-admin}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "view-identity-providers",
                    "query-groups",
                    "manage-identity-providers",
                    "manage-clients",
                    "manage-realm",
                    "query-realms",
                    "view-events",
                    "impersonation",
                    "manage-authorization",
                    "view-authorization",
                    "view-clients",
                    "create-client",
                    "manage-users",
                    "query-users",
                    "query-clients",
                    "manage-events",
                    "view-realm",
                    "view-users"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "6a28edd1-8348-4068-add4-51b8d30b056b",
              "name": "query-clients",
              "description": "${role_query-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "87c245b8-9f52-4d01-b036-f4daf9cf03a4",
              "name": "manage-events",
              "description": "${role_manage-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "7bbb25dd-e54d-4c00-b3a2-a17660b42056",
              "name": "view-realm",
              "description": "${role_view-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            },
            {
              "id": "1d10a114-e698-48fb-8aa1-f7549861e33a",
              "name": "view-users",
              "description": "${role_view-users}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-groups",
                    "query-users"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
              "attributes": {}
            }
          ],
          "security-admin-console": [],
          "czertainly": [],
          "admin-cli": [],
          "account-console": [],
          "broker": [
            {
              "id": "c4a068e1-8487-487d-bd07-ee4b0aa8d9a7",
              "name": "read-token",
              "description": "${role_read-token}",
              "composite": false,
              "clientRole": true,
              "containerId": "53e2e11b-66ef-40ad-bf95-ba8a20b192d2",
              "attributes": {}
            }
          ],
          "account": [
            {
              "id": "09e0d46b-8651-4338-b97e-1d4d62e0e2c6",
              "name": "view-profile",
              "description": "${role_view-profile}",
              "composite": false,
              "clientRole": true,
              "containerId": "5de42a1c-165c-421a-ada3-91023884af74",
              "attributes": {}
            },
            {
              "id": "9d399e87-4638-4f73-bd29-05450519c3de",
              "name": "view-applications",
              "description": "${role_view-applications}",
              "composite": false,
              "clientRole": true,
              "containerId": "5de42a1c-165c-421a-ada3-91023884af74",
              "attributes": {}
            },
            {
              "id": "cf7c0b9d-d676-4e47-b9c8-48ef18b9010d",
              "name": "manage-account-links",
              "description": "${role_manage-account-links}",
              "composite": false,
              "clientRole": true,
              "containerId": "5de42a1c-165c-421a-ada3-91023884af74",
              "attributes": {}
            },
            {
              "id": "1ded9bb4-b38c-4726-a123-9892fc977795",
              "name": "view-consent",
              "description": "${role_view-consent}",
              "composite": false,
              "clientRole": true,
              "containerId": "5de42a1c-165c-421a-ada3-91023884af74",
              "attributes": {}
            },
            {
              "id": "fafba62f-cb44-4f4a-bd37-51a412e8b0c9",
              "name": "manage-consent",
              "description": "${role_manage-consent}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "view-consent"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "5de42a1c-165c-421a-ada3-91023884af74",
              "attributes": {}
            },
            {
              "id": "a365eeb3-fbfc-4b95-a1fb-bb4dd82b92c3",
              "name": "manage-account",
              "description": "${role_manage-account}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "manage-account-links"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "5de42a1c-165c-421a-ada3-91023884af74",
              "attributes": {}
            },
            {
              "id": "70938ab2-cfa4-4a86-bbeb-27913027b7b8",
              "name": "view-groups",
              "description": "${role_view-groups}",
              "composite": false,
              "clientRole": true,
              "containerId": "5de42a1c-165c-421a-ada3-91023884af74",
              "attributes": {}
            },
            {
              "id": "00bbe495-2077-4163-8efa-027a3de94009",
              "name": "delete-account",
              "description": "${role_delete-account}",
              "composite": false,
              "clientRole": true,
              "containerId": "5de42a1c-165c-421a-ada3-91023884af74",
              "attributes": {}
            }
          ]
        }
      },
      "groups": [],
      "defaultRole": {
        "id": "b348ab9b-35f7-414c-970b-f1787d51df5f",
        "name": "default-roles-czertainly",
        "description": "${role_default-roles}",
        "composite": true,
        "clientRole": false,
        "containerId": "1595e715-e7d0-417a-8df5-77bbdde4e8d8"
      },
      "requiredCredentials": [
        "password"
      ],
      "otpPolicyType": "totp",
      "otpPolicyAlgorithm": "HmacSHA1",
      "otpPolicyInitialCounter": 0,
      "otpPolicyDigits": 6,
      "otpPolicyLookAheadWindow": 1,
      "otpPolicyPeriod": 30,
      "otpPolicyCodeReusable": false,
      "otpSupportedApplications": [
        "totpAppFreeOTPName",
        "totpAppGoogleName",
        "totpAppMicrosoftAuthenticatorName"
      ],
      "localizationTexts": {},
      "webAuthnPolicyRpEntityName": "keycloak",
      "webAuthnPolicySignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyRpId": "",
      "webAuthnPolicyAttestationConveyancePreference": "not specified",
      "webAuthnPolicyAuthenticatorAttachment": "not specified",
      "webAuthnPolicyRequireResidentKey": "not specified",
      "webAuthnPolicyUserVerificationRequirement": "not specified",
      "webAuthnPolicyCreateTimeout": 0,
      "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyAcceptableAaguids": [],
      "webAuthnPolicyExtraOrigins": [],
      "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
      "webAuthnPolicyPasswordlessSignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyPasswordlessRpId": "",
      "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
      "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
      "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
      "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
      "webAuthnPolicyPasswordlessCreateTimeout": 0,
      "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyPasswordlessAcceptableAaguids": [],
      "webAuthnPolicyPasswordlessExtraOrigins": [],
      "users": [
        {
          "id": "1d14cb34-10b3-4d68-9272-0fbf04ce72c9",
          "createdTimestamp": 1678523686477,
          "username": "admin",
          "enabled": true,
          "totp": false,
          "emailVerified": true,
          "firstName": "admin",
          "lastName": "admin",
          "email": "jan@tomasek.cz",
          "attributes": {
            "groups": [
              "superadmin"
            ]
          },
          "credentials": [
            {
              "type": "password",
              "value": "newgenerationtrustcare"
            }
          ],
          "disableableCredentialTypes": [],
          "requiredActions": [],
          "realmRoles": [
            "default-roles-czertainly"
          ],
          "notBefore": 0,
          "groups": []
        }
      ],
      "scopeMappings": [
        {
          "clientScope": "offline_access",
          "roles": [
            "offline_access"
          ]
        }
      ],
      "clientScopeMappings": {
        "account": [
          {
            "client": "account-console",
            "roles": [
              "manage-account",
              "view-groups"
            ]
          }
        ]
      },
      "clients": [
        {
          "id": "5de42a1c-165c-421a-ada3-91023884af74",
          "clientId": "account",
          "name": "${client_account}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/CZERTAINLY/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/CZERTAINLY/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "c0586c6f-4c87-4a42-aa65-fe3acf214e95",
          "clientId": "account-console",
          "name": "${client_account-console}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/CZERTAINLY/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/CZERTAINLY/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "517a0fe7-0eca-4ec4-bc3a-b2aea68108ff",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "44febd98-96ae-4515-8f2b-eba16e465fa9",
          "clientId": "admin-cli",
          "name": "${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "53e2e11b-66ef-40ad-bf95-ba8a20b192d2",
          "clientId": "broker",
          "name": "${client_broker}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "b7235af6-8c98-4d96-a1c3-94b94ed8d131",
          "clientId": "czertainly",
          "name": "czertainly",
          "description": "",
          "rootUrl": "https://semik66.3key.company",
          "adminUrl": "",
          "baseUrl": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "example",
          "redirectUris": [
                    "/api/login/oauth2/code/internal"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "oidc.ciba.grant.enabled": "false",
            "client.secret.creation.time": "1678523342",
            "backchannel.logout.session.required": "true",
            "post.logout.redirect.uris": "/administrator/",
            "oauth2.device.authorization.grant.enabled": "false",
            "display.on.consent.screen": "false",
            "use.jwks.url": "false",
            "backchannel.logout.revoke.offline.tokens": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "debe702f-3d18-4eed-8909-806501f6afe2",
              "name": "Groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "aggregate.attrs": "false",
                "userinfo.token.claim": "true",
                "multivalued": "true",
                "user.attribute": "groups",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "roles"
              }
            },
            {
              "id": "1ff9248b-c05e-48e8-b8db-0dc57e455620",
              "name": "Username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "introspection.token.claim": "true",
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "lightweight.claim": "false",
                "access.token.claim": "true",
                "claim.name": "username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "a0cb4247-b04f-4ae1-beaf-761995705510",
              "name": "Audience",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "czertainly",
                "introspection.token.claim": "true",
                "userinfo.token.claim": "false",
                "id.token.claim": "true",
                "lightweight.claim": "false",
                "access.token.claim": "true"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "e3954784-d2ae-4a60-8ed2-f68336cf576d",
          "clientId": "realm-management",
          "name": "${client_realm-management}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "94e2d904-99ed-4af1-9973-f0332f39d026",
          "clientId": "security-admin-console",
          "name": "${client_security-admin-console}",
          "rootUrl": "${authAdminUrl}",
          "baseUrl": "/admin/CZERTAINLY/console/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/admin/CZERTAINLY/console/*"
          ],
          "webOrigins": [
            "+"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "dd4325b0-ebba-4483-87bd-fa11e5749ca8",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "profile",
            "roles",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        }
      ],
      "clientScopes": [
        {
          "id": "d0302694-fe73-4811-90ab-a7e566cd7cdd",
          "name": "role_list",
          "description": "SAML role list",
          "protocol": "saml",
          "attributes": {
            "consent.screen.text": "${samlRoleListScopeConsentText}",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "f52f8be8-c73b-4f1b-a574-3bfdf892cb9f",
              "name": "role list",
              "protocol": "saml",
              "protocolMapper": "saml-role-list-mapper",
              "consentRequired": false,
              "config": {
                "single": "false",
                "attribute.nameformat": "Basic",
                "attribute.name": "Role"
              }
            }
          ]
        },
        {
          "id": "d55a2d67-5cc3-4c27-a5ca-5425dca6ce00",
          "name": "phone",
          "description": "OpenID Connect built-in scope: phone",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${phoneScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "1687b184-b2c5-461a-b0c1-73c07d84406f",
              "name": "phone number verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumberVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "4df3ff5e-000c-4497-b521-e293bd3bb0d6",
              "name": "phone number",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumber",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "f5439842-e0a7-4fc8-964d-ad45aea65c18",
          "name": "profile",
          "description": "OpenID Connect built-in scope: profile",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${profileScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "ae39a909-cbea-43a5-8680-a817d14c946e",
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            },
            {
              "id": "ff5a194d-601a-471b-8ea1-97a4cab264bb",
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "long"
              }
            },
            {
              "id": "19b8a0cf-35dc-4182-a9bb-9d7e6b2c8f06",
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "4c8cc8df-1754-4277-ac0f-e5a4748c21fb",
              "name": "website",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "website",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "website",
                "jsonType.label": "String"
              }
            },
            {
              "id": "332d65b5-04cd-4c49-a074-6f8c0c45ac43",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            },
            {
              "id": "afbe422c-0751-4282-8544-bb5bfaa94b10",
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "cb2d3f02-188f-4328-a708-cba1bd547035",
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "2d21559b-0dbb-40d8-a600-51371877579e",
              "name": "profile",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "profile",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "profile",
                "jsonType.label": "String"
              }
            },
            {
              "id": "a0a877d1-aac9-45c4-8903-f25a351b6d46",
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "id": "097b107f-3f96-4a5a-bc7d-647b2f7707ea",
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "49353b57-12b6-4f03-af7b-857eb08080a0",
              "name": "zoneinfo",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "zoneinfo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "zoneinfo",
                "jsonType.label": "String"
              }
            },
            {
              "id": "730ed6d3-92af-48b5-bd75-3dc9978fdd6d",
              "name": "picture",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "picture",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "picture",
                "jsonType.label": "String"
              }
            },
            {
              "id": "d9bac37c-1b3b-4e3a-8990-c5d98966f3b5",
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "eae7d918-d28d-4ac8-9fc5-277bb3ff6996",
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "466fe01a-2387-4874-8e5d-c6ab16161ce0",
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${rolesScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "2d7688f4-d4b4-4748-a026-506200a87ccf",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.${client_id}.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "359fc19c-3f62-4827-b1f5-659dee46c5c8",
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "d3b1a4a3-c769-4cb6-8c80-fdb5c8b96aa8",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "id": "7008de03-ffb3-4f9d-9ad7-2866233ddf10",
          "name": "web-origins",
          "description": "OpenID Connect scope for add allowed web origins to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false",
            "consent.screen.text": ""
          },
          "protocolMappers": [
            {
              "id": "1ff1cf70-6add-4f21-88f0-5b64ab3f0593",
              "name": "allowed web origins",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-allowed-origins-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "id": "8d81952a-f00e-4e2d-9df1-bd29351c6fff",
          "name": "email",
          "description": "OpenID Connect built-in scope: email",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${emailScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "0f144365-821a-4ee6-a69b-32c37c487fbd",
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            },
            {
              "id": "4ce17c40-af78-495f-a2ce-d79936b5b4ba",
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            }
          ]
        },
        {
          "id": "0484657d-c691-4bb0-aa5f-2f9a1675e7d6",
          "name": "acr",
          "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "9d2696b0-7cd6-4ff0-b29f-e6d555bca6b2",
              "name": "acr loa level",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-acr-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            }
          ]
        },
        {
          "id": "b3495d06-6fad-42d0-94de-20f39d1672c8",
          "name": "offline_access",
          "description": "OpenID Connect built-in scope: offline_access",
          "protocol": "openid-connect",
          "attributes": {
            "consent.screen.text": "${offlineAccessScopeConsentText}",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "5692e46a-f579-48f5-be89-7020c271e4e0",
          "name": "microprofile-jwt",
          "description": "Microprofile - JWT built-in scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "7ed930c1-a925-4e86-912d-92b6d09569d6",
              "name": "upn",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "upn",
                "jsonType.label": "String"
              }
            },
            {
              "id": "6cf6f9b6-7703-4814-a2af-91e768a73d7c",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "974f445a-5fdc-44ce-a910-03f305e329f1",
          "name": "address",
          "description": "OpenID Connect built-in scope: address",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${addressScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "7e600eb4-04fa-45cd-abe6-37037a8b69bf",
              "name": "address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-address-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute.formatted": "formatted",
                "user.attribute.country": "country",
                "user.attribute.postal_code": "postal_code",
                "userinfo.token.claim": "true",
                "user.attribute.street": "street",
                "id.token.claim": "true",
                "user.attribute.region": "region",
                "access.token.claim": "true",
                "user.attribute.locality": "locality"
              }
            }
          ]
        }
      ],
      "defaultDefaultClientScopes": [
        "role_list",
        "profile",
        "email",
        "roles",
        "web-origins",
        "acr"
      ],
      "defaultOptionalClientScopes": [
        "offline_access",
        "address",
        "phone",
        "microprofile-jwt"
      ],
      "browserSecurityHeaders": {
        "contentSecurityPolicyReportOnly": "",
        "xContentTypeOptions": "nosniff",
        "referrerPolicy": "",
        "xRobotsTag": "none",
        "xFrameOptions": "SAMEORIGIN",
        "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
        "xXSSProtection": "1; mode=block",
        "strictTransportSecurity": "max-age=31536000; includeSubDomains"
      },
      "smtpServer": {},
      "loginTheme": "czertainly",
      "eventsEnabled": false,
      "eventsListeners": [
        "jboss-logging"
      ],
      "enabledEventTypes": [],
      "adminEventsEnabled": false,
      "adminEventsDetailsEnabled": false,
      "identityProviders": [],
      "identityProviderMappers": [],
      "components": {
        "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
          {
            "id": "8301548e-9060-4de8-ae78-a8ab4c31176d",
            "name": "Consent Required",
            "providerId": "consent-required",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "00bea91c-4d19-442c-9182-8b112bdedbdd",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "292c6b7b-ef3c-43e1-b268-966eba578ddf",
            "name": "Max Clients Limit",
            "providerId": "max-clients",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "max-clients": [
                "200"
              ]
            }
          },
          {
            "id": "3816a80d-f9ec-461f-ac2c-ee6c0c144431",
            "name": "Trusted Hosts",
            "providerId": "trusted-hosts",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "host-sending-registration-request-must-match": [
                "true"
              ],
              "client-uris-must-match": [
                "true"
              ]
            }
          },
          {
            "id": "6e501fee-baa3-4264-9f5a-6c96aea34d9c",
            "name": "Full Scope Disabled",
            "providerId": "scope",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "cf217361-5fd6-4f5f-a71a-09ad8563dd58",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "oidc-usermodel-property-mapper",
                "oidc-full-name-mapper",
                "saml-role-list-mapper",
                "saml-user-property-mapper",
                "oidc-address-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "saml-user-attribute-mapper",
                "oidc-usermodel-attribute-mapper"
              ]
            }
          },
          {
            "id": "6093ad90-96e9-4fb5-adbf-c49a01b172a3",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "saml-user-property-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "oidc-usermodel-attribute-mapper",
                "saml-user-attribute-mapper",
                "oidc-address-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-full-name-mapper",
                "saml-role-list-mapper"
              ]
            }
          },
          {
            "id": "9193266f-9590-4d67-9819-ed4878bf1b03",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          }
        ],
        "org.keycloak.userprofile.UserProfileProvider": [
          {
            "id": "ee792063-cfe7-4450-835d-5589f4f40ee9",
            "providerId": "declarative-user-profile",
            "subComponents": {},
            "config": {
              "kc.user.profile.config": [
                "{\"attributes\":[{\"name\":\"username\",\"displayName\":\"${username}\",\"validations\":{\"length\":{\"min\":3,\"max\":255},\"username-prohibited-characters\":{},\"up-username-not-idn-homograph\":{}},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"email\",\"displayName\":\"${email}\",\"validations\":{\"email\":{},\"length\":{\"max\":255}},\"required\":{\"roles\":[\"user\"]},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"firstName\",\"displayName\":\"${firstName}\",\"validations\":{\"length\":{\"max\":255},\"person-name-prohibited-characters\":{}},\"required\":{\"roles\":[\"user\"]},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false},{\"name\":\"lastName\",\"displayName\":\"${lastName}\",\"validations\":{\"length\":{\"max\":255},\"person-name-prohibited-characters\":{}},\"required\":{\"roles\":[\"user\"]},\"permissions\":{\"view\":[\"admin\",\"user\"],\"edit\":[\"admin\",\"user\"]},\"multivalued\":false}],\"groups\":[{\"name\":\"user-metadata\",\"displayHeader\":\"User metadata\",\"displayDescription\":\"Attributes, which refer to user metadata\"}],\"unmanagedAttributePolicy\":\"ENABLED\"}"
              ]
            }
          }
        ],
        "org.keycloak.keys.KeyProvider": [
          {
            "id": "1d263141-08f7-41d4-82e4-077e923c2858",
            "name": "hmac-generated",
            "providerId": "hmac-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "HS256"
              ]
            }
          },
          {
            "id": "e9feae51-4587-4dec-8c69-f70c0b74bc78",
            "name": "hmac-generated-hs512",
            "providerId": "hmac-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "HS512"
              ]
            }
          },
          {
            "id": "375f4771-d287-4a87-8ace-4c3cef2aa78b",
            "name": "aes-generated",
            "providerId": "aes-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "fe0d0a44-f551-40d0-9db7-7133ff8880e0",
            "name": "rsa-enc-generated",
            "providerId": "rsa-enc-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "RSA-OAEP"
              ]
            }
          },
          {
            "id": "e3eaed79-8d5e-4d43-b550-8fed7ebe83d0",
            "name": "rsa-generated",
            "providerId": "rsa-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          }
        ]
      },
      "internationalizationEnabled": false,
      "supportedLocales": [],
      "authenticationFlows": [
        {
          "id": "74602702-4ae9-4b10-8b62-68d6aef642c2",
          "alias": "Account verification options",
          "description": "Method with which to verity the existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-email-verification",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Verify Existing Account by Re-authentication",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "af04e7ff-0c96-43a3-9162-3f1b47b76e27",
          "alias": "Browser - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "fc7a6f9b-5c06-411a-b443-abf7d630eec3",
          "alias": "Direct Grant - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "direct-grant-validate-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "d32fc078-6962-4bfd-9453-926c1448f1ed",
          "alias": "First broker login - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "30833aa5-a574-4802-b0f0-f398ebbb2d49",
          "alias": "Handle Existing Account",
          "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-confirm-link",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Account verification options",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "59f3b49e-304c-49ac-904d-6455d8c5f159",
          "alias": "Reset - Conditional OTP",
          "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "53a50797-df50-41fc-b548-226dbf0130d5",
          "alias": "User creation or linking",
          "description": "Flow for the existing/non-existing user alternatives",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "create unique user config",
              "authenticator": "idp-create-user-if-unique",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Handle Existing Account",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "7579d395-ed06-453c-903c-8d16a875275d",
          "alias": "Verify Existing Account by Re-authentication",
          "description": "Reauthentication of existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "First broker login - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "89ef3912-7fa4-4249-bc2c-2c43b68d69ba",
          "alias": "browser",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "autheticatorFlow": true,
              "flowAlias": "forms",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "0b38753e-f5df-4373-b0d3-2e01b0931fa9",
          "alias": "clients",
          "description": "Base authentication for clients",
          "providerId": "client-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "client-secret",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-secret-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-x509",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 40,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "47747546-22db-48f8-9b24-d28191b52e2c",
          "alias": "direct grant",
          "description": "OpenID Connect Resource Owner Grant",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "direct-grant-validate-username",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "direct-grant-validate-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 30,
              "autheticatorFlow": true,
              "flowAlias": "Direct Grant - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "383b2fcc-0cc1-4c7e-879b-d5f223cd044a",
          "alias": "docker auth",
          "description": "Used by Docker clients to authenticate against the IDP",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "docker-http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "06882329-b12a-4da7-a8bb-1193a16722bb",
          "alias": "first broker login",
          "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "review profile config",
              "authenticator": "idp-review-profile",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "User creation or linking",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "9dd6cda5-2a90-40b5-8a79-0b79af91bcc1",
          "alias": "forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Browser - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "87200fe0-1296-46fc-b4cb-bafa169ecd2d",
          "alias": "registration",
          "description": "registration flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": true,
              "flowAlias": "registration form",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "e7049396-7477-424d-82e0-0f07546f9e7c",
          "alias": "registration form",
          "description": "registration form",
          "providerId": "form-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-user-creation",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-password-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 50,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-recaptcha-action",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 60,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "73e10685-2c0e-4ca1-965b-e8d15cb191ec",
          "alias": "reset credentials",
          "description": "Reset credentials for a user if they forgot their password or something",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "reset-credentials-choose-user",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-credential-email",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 40,
              "autheticatorFlow": true,
              "flowAlias": "Reset - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "889c5927-6ed6-49c9-a72f-682166dc2044",
          "alias": "saml ecp",
          "description": "SAML ECP Profile Authentication Flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        }
      ],
      "authenticatorConfig": [
        {
          "id": "b8381462-8b36-4cae-9e23-b929831de893",
          "alias": "create unique user config",
          "config": {
            "require.password.update.after.registration": "false"
          }
        },
        {
          "id": "3d2a5075-03cd-4391-b406-38e261888faf",
          "alias": "review profile config",
          "config": {
            "update.profile.on.first.login": "missing"
          }
        }
      ],
      "requiredActions": [
        {
          "alias": "CONFIGURE_TOTP",
          "name": "Configure OTP",
          "providerId": "CONFIGURE_TOTP",
          "enabled": true,
          "defaultAction": false,
          "priority": 10,
          "config": {}
        },
        {
          "alias": "TERMS_AND_CONDITIONS",
          "name": "Terms and Conditions",
          "providerId": "TERMS_AND_CONDITIONS",
          "enabled": false,
          "defaultAction": false,
          "priority": 20,
          "config": {}
        },
        {
          "alias": "UPDATE_PASSWORD",
          "name": "Update Password",
          "providerId": "UPDATE_PASSWORD",
          "enabled": true,
          "defaultAction": false,
          "priority": 30,
          "config": {}
        },
        {
          "alias": "UPDATE_PROFILE",
          "name": "Update Profile",
          "providerId": "UPDATE_PROFILE",
          "enabled": true,
          "defaultAction": false,
          "priority": 40,
          "config": {}
        },
        {
          "alias": "VERIFY_EMAIL",
          "name": "Verify Email",
          "providerId": "VERIFY_EMAIL",
          "enabled": true,
          "defaultAction": false,
          "priority": 50,
          "config": {}
        },
        {
          "alias": "delete_account",
          "name": "Delete Account",
          "providerId": "delete_account",
          "enabled": false,
          "defaultAction": false,
          "priority": 60,
          "config": {}
        },
        {
          "alias": "webauthn-register",
          "name": "Webauthn Register",
          "providerId": "webauthn-register",
          "enabled": true,
          "defaultAction": false,
          "priority": 70,
          "config": {}
        },
        {
          "alias": "webauthn-register-passwordless",
          "name": "Webauthn Register Passwordless",
          "providerId": "webauthn-register-passwordless",
          "enabled": true,
          "defaultAction": false,
          "priority": 80,
          "config": {}
        },
        {
          "alias": "update_user_locale",
          "name": "Update User Locale",
          "providerId": "update_user_locale",
          "enabled": true,
          "defaultAction": false,
          "priority": 1000,
          "config": {}
        }
      ],
      "browserFlow": "browser",
      "registrationFlow": "registration",
      "directGrantFlow": "direct grant",
      "resetCredentialsFlow": "reset credentials",
      "clientAuthenticationFlow": "clients",
      "dockerAuthenticationFlow": "docker auth",
      "firstBrokerLoginFlow": "first broker login",
      "attributes": {
        "cibaBackchannelTokenDeliveryMode": "poll",
        "cibaAuthRequestedUserHint": "login_hint",
        "clientOfflineSessionMaxLifespan": "0",
        "oauth2DevicePollingInterval": "5",
        "clientSessionIdleTimeout": "0",
        "actionTokenGeneratedByUserLifespan.verify-email": "",
        "actionTokenGeneratedByUserLifespan.idp-verify-account-via-email": "",
        "clientOfflineSessionIdleTimeout": "0",
        "actionTokenGeneratedByUserLifespan.execute-actions": "",
        "cibaInterval": "5",
        "realmReusableOtpCode": "false",
        "cibaExpiresIn": "120",
        "oauth2DeviceCodeLifespan": "600",
        "parRequestUriLifespan": "60",
        "clientSessionMaxLifespan": "0",
        "frontendUrl": "",
        "acr.loa.map": "{}",
        "shortVerificationUri": "",
        "actionTokenGeneratedByUserLifespan.reset-credentials": ""
      },
      "keycloakVersion": "24.0.2",
      "userManagedAccessAllowed": false,
      "clientProfiles": {
        "profiles": []
      },
      "clientPolicies": {
        "policies": []
      }
    }
    
  create_schema.sh: |-    #/bin/sh
    
    psql -c "DO \$\$
    BEGIN
        EXECUTE 'CREATE SCHEMA IF NOT EXISTS keycloak';
    EXCEPTION
        WHEN duplicate_schema THEN RAISE NOTICE 'Schema \"keycloak\" already exists';
        WHEN insufficient_privilege THEN RAISE NOTICE 'Permission denied to create schema \"keycloak\"';
    END;
    \$\$"
---
# Source: czertainly/templates/core-scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: core-scripts-configmap
data:
  register-admin.sh: |    
    #!/bin/sh
    
    while ! nc -z localhost 8080; do sleep 1; done
    while ! nc -z localhost 8181; do sleep 1; done
    
    ADMIN_CERT=$( echo $ADMIN_CERT | awk '{gsub(/[[:blank:]]/,""); print}' )
    ADMIN_CERT=$( echo $ADMIN_CERT | awk '{gsub(/-----BEGINCERTIFICATE-----/,""); print}' )
    ADMIN_CERT=$( echo $ADMIN_CERT | awk '{gsub(/-----ENDCERTIFICATE-----/,""); print}' )
    
    curl -X POST \
      -H 'content-type: application/json' \
      -d '
      {
        "username": "admin",
        "description": "CZERTAINLY Admin",
        "firstName": "admin",
        "lastName": "admin",
        "email": "jan@tomasek.cz",
        "enabled": "true",
        "certificateData": "'$ADMIN_CERT'",
        "certificateUuid": ""
      }' \
      http://localhost:8080/api/v1/local/admins
    
  register-internal-keycloak.sh: |    
    #!/bin/sh
    
    # Check if the client secret is provided
    if [ -z "$1" ]; then
      echo "Usage: $0 <clientSecret>"
      exit 1
    fi
    
    # Assign the first parameter to a variable
    CLIENT_SECRET=$1
    
    # Wait for services to be ready
    while ! nc -z localhost 8080; do sleep 1; done
    while ! nc -z localhost 8181; do sleep 1; done
    
    # Perform the cURL request
    curl -X PUT \
      -H 'content-type: application/json' \
      -d '
      {
        "issuerUrl":"https://semik66.3key.company/kc/realms/CZERTAINLY",
        "clientId": "czertainly",
        "clientSecret": "'"$CLIENT_SECRET"'",
        "authorizationUrl": "https://semik66.3key.company/kc/realms/CZERTAINLY/protocol/openid-connect/auth",
        "tokenUrl": "http://keycloak-internal-service:8080/kc/realms/CZERTAINLY/protocol/openid-connect/token",
        "logoutUrl": "https://semik66.3key.company/kc/realms/CZERTAINLY/protocol/openid-connect/logout",
        "jwkSetUrl": "http://keycloak-internal-service:8080/kc/realms/CZERTAINLY/protocol/openid-connect/certs",
        "scope": ["openid"],
        "audiences": ["czertainly"],
        "postLogoutUrl": "https://semik66.3key.company/administrator/",
        "skew": 60
      }' \
      http://localhost:8080/api/v1/settings/authentication/oauth2Providers/internal
---
# Source: czertainly/templates/global-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: global-configmap
data:
  kong.yml: |-    
    _format_version: '2.1'
    _transform: true
    services:
      # Core service for the backend API
      - name: core
        host: core-service
        port: 8080
        protocol: http
        routes:
          - name: protocols_route
            strip_path: false
            preserve_host: true
            paths:
              - /api
      # OAuth2 authentication handlers for the login and logout routes
      - name: core-login-logout
        host: core-service
        port: 8080
        protocol: http
        path: /api
        routes:
          - name: core-oauth2_route
            strip_path: false
            preserve_host: true
            paths:
              - /login
              - /logout
      # Frontend service for the administrator interface
      - name: fe-administrator
        host: fe-administrator-service
        port: 8080
        protocol: http
        routes:
          - name: fe-administrator_route-cert
            preserve_host: true
            strip_path: true
            paths:
              - /administrator
      # Management of Keycloak users and roles
      - name: keycloak-internal-service
        host: keycloak-internal-service
        port: 8080
        routes:
          - name: keycloak
            strip_path: false
            preserve_host: true
            paths:
              - /kc
      # RabbitMQ management
      - name: messaging-service
        host: messaging-service
        port: 15672
        routes:
          - name: rabbitmq
            strip_path: true
            preserve_host: true
            paths:
              - /mq
  messaging.host: "messaging-service"
  messaging.http.port: "15672"
  messaging.amqp.port: "5672"
  messaging.enabled_plugins: |
    [rabbitmq_peer_discovery_k8s, rabbitmq_management].
  messaging.rabbitmq.conf: |
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default
    queue_master_locator=min-masters
  
    ## Logging to console
    log.console = true
    log.console.level = info
    log.file = false
  
    ## Management plugin
    loopback_users = none
---
# Source: czertainly/charts/apiGateway/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: api-gateway-role
  namespace: "czertainly-example"
  labels:
    helm.sh/chart: apiGateway-3.8.0-develop
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get"]
  - apiGroups: [ "apps" ]
    resources: [ "deployments" ]
    verbs: [ "get", "patch" ]
---
# Source: czertainly/charts/messagingService/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: messaging-role
  namespace: "czertainly-example"
  labels:
    helm.sh/chart: messagingService-3.12.1-4-develop
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.12.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: czertainly/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: czertainly-role
  namespace: "czertainly-example"
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "delete"]
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs: [ "create", "get", "list", "delete", "patch" ]
  - apiGroups: [ "apps" ]
    resources: [ "deployments" ]
    verbs: [ "get", "list", "delete", "patch" ]
---
# Source: czertainly/charts/apiGateway/templates/rbac/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-gateway-role-binding
  namespace: "czertainly-example"
  labels:
    helm.sh/chart: apiGateway-3.8.0-develop
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: api-gateway-sa
roleRef:
  kind: Role
  name: api-gateway-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: czertainly/charts/messagingService/templates/rbac/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: messaging-role-binding
  namespace: "czertainly-example"
  labels:
    helm.sh/chart: messagingService-3.12.1-4-develop
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.12.1"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: messaging-rabbitmq-sa
roleRef:
  kind: Role
  name: messaging-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: czertainly/templates/rbac/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: czertainly-role-binding
  namespace: "czertainly-example"
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: czertainly-sa
roleRef:
  kind: Role
  name: czertainly-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: czertainly/charts/apiGateway/templates/api-gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  labels:
    helm.sh/chart: apiGateway-3.8.0-develop
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8001
      protocol: "TCP"
      name: admin
    - port: 8000
      protocol: "TCP"
      name: consumer
  selector:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/authOpaPolicies/templates/auth-opa-policies-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth-opa-policies-service
  labels:
    helm.sh/chart: authOpaPolicies-1.2.1-2-develop
    app.kubernetes.io/name: auth-opa-policies
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.2.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: auth-opa-policies
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/authService/templates/auth-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  labels:
    helm.sh/chart: authService-1.5.0-2-develop
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/commonCredentialProvider/templates/common-credential-provider-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: commonCredentialProvider-1.3.3-2-develop
    app.kubernetes.io/name: common-credential-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.3.3"
    app.kubernetes.io/managed-by: Helm
  name: common-credential-provider-service
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: common-credential-provider
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/cryptosenseDiscoveryProvider/templates/cryptosense-discovery-provider-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cryptosense-discovery-provider-service
  labels:
    helm.sh/chart: cryptosenseDiscoveryProvider-1.4.0-3-develop
    app.kubernetes.io/name: cryptosense-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: cryptosense-discovery-provider
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/ctLogsDiscoveryProvider/templates/hashicorp-vault-connector-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ctLogsDiscoveryProvider-1.0.0-2-develop
    app.kubernetes.io/name: ct-logs-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  name: ct-logs-discovery-provider-service
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: ct-logs-discovery-provider
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/feAdministrator/templates/fe-administrator-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fe-administrator-service
  labels:
    helm.sh/chart: feAdministrator-2.13.1-1-develop
    app.kubernetes.io/name: fe-administrator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.13.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: fe-administrator
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/keycloakInternal/templates/keycloak-internal-service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-internal-service-headless
  labels:
    helm.sh/chart: keycloakInternal-24.0.2-0-3-develop
    app.kubernetes.io/name: keycloak-internal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "24.0.2-0"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: "TCP"
      targetPort: http
  selector:
    app.kubernetes.io/name: keycloak-internal
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/keycloakInternal/templates/keycloak-internal-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-internal-service
  labels:
    helm.sh/chart: keycloakInternal-24.0.2-0-3-develop
    app.kubernetes.io/name: keycloak-internal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "24.0.2-0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: "TCP"
    - name: https-redirect
      port: 443
      targetPort: 8443
      protocol: "TCP"
    - name: http-redirect
      port: 80
      targetPort: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: keycloak-internal
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/keystoreEntityProvider/templates/keystore-entity-provider-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: keystore-entity-provider-service
  labels:
    helm.sh/chart: keystoreEntityProvider-1.4.1-3-develop
    app.kubernetes.io/name: keystore-entity-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: keystore-entity-provider
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/messagingService/templates/messaging-service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: messaging-service-headless
  labels:
    helm.sh/chart: messagingService-3.12.1-4-develop
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.12.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      protocol: "TCP"
      targetPort: 4369
    - name: cluster-rpc
      port: 25672
      protocol: "TCP"
      targetPort: 25672
  sessionAffinity: None
  selector:
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/messagingService/templates/messaging-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: messaging-service
  labels:
    helm.sh/chart: messagingService-3.12.1-4-develop
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.12.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 15672
      protocol: "TCP"
    - name: amqp
      port: 5672
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/networkDiscoveryProvider/templates/network-discovery-provider-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: network-discovery-provider-service
  labels:
    helm.sh/chart: networkDiscoveryProvider-1.5.0-2-develop
    app.kubernetes.io/name: network-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: network-discovery-provider
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/pyAdcsConnector/templates/pyadcs-connector-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pyadcs-connector-service
  labels:
    helm.sh/chart: pyAdcsConnector-1.1.2-2-develop
    app.kubernetes.io/name: pyadcs-connector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: pyadcs-connector
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/schedulerService/templates/scheduler-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: scheduler-service-service
  labels:
    helm.sh/chart: schedulerService-1.0.1-2-develop
    app.kubernetes.io/name: scheduler-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: scheduler-service
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/softwareCryptographyProvider/templates/software-cryptography-provider-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: software-cryptography-provider-service
  labels:
    helm.sh/chart: softwareCryptographyProvider-1.2.2-2-develop
    app.kubernetes.io/name: software-cryptography-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: software-cryptography-provider
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/x509ComplianceProvider/templates/x509-compliance-provider-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: x509ComplianceProvider-1.3.0-4-develop
    app.kubernetes.io/name: x509-compliance-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
  name: x509-compliance-provider-service
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: x509-compliance-provider
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/templates/core-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: core-service
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: "TCP"
  selector:
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
---
# Source: czertainly/charts/apiGateway/templates/api-gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-deployment
  labels:
    helm.sh/chart: apiGateway-3.8.0-develop
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api-gateway
        app.kubernetes.io/instance: release-name
      annotations:
        # when the kong declarative config map is changed, restart deployment
        checksum/config: 7ce5a2f70fdf1564daa9a8d65c376f819eadb166a4dbf7f9dbf34c822ea5bd83
    spec:      
      containers:
        - name: api-gateway
          image: docker.io/kong:3.8.0
          imagePullPolicy: IfNotPresent
          env:
            - name: KONG_DATABASE
              value: "off"
            - name: KONG_PREFIX
              value: "/tmp/"
            - name: KONG_PROXY_ACCESS_LOG
              value: "/dev/stdout"
            - name: KONG_ADMIN_ACCESS_LOG
              value: "/dev/stdout"
            - name: KONG_PROXY_ERROR_LOG
              value: "/dev/stderr"
            - name: KONG_ADMIN_ERROR_LOG
              value: "/dev/stderr"
            - name: KONG_ADMIN_LISTEN
              value: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
            - name: KONG_DECLARATIVE_CONFIG
              value: "/kong/declarative/kong.yml"
            - name: KONG_PLUGINS
              value: "request-transformer,cors,file-log,response-transformer,post-function"
            - name: KONG_LOG_LEVEL
              value: "info"
            - name: KONG_TRUSTED_IPS
              value: "0.0.0.0/0,::/0"
          ports:
            - containerPort: 8000
              name: consumer-http
            - containerPort: 8001
              name: admin-http
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 100
          readinessProbe:
            exec:
              command:
                - kong
                - health
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            exec:
              command:
                - kong
                - health
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - name: api-gateway-config-volume
              mountPath: /kong/declarative
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: api-gateway-config-volume
          configMap:
            name: global-configmap
            items:
              - key: kong.yml
                path: kong.yml
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "10Mi"
---
# Source: czertainly/charts/authOpaPolicies/templates/auth-opa-policies-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-opa-policies-deployment
  labels:
    helm.sh/chart: authOpaPolicies-1.2.1-2-develop
    app.kubernetes.io/name: auth-opa-policies
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.2.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-opa-policies
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: auth-opa-policies
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: auth-opa-policies
          image: docker.io/czertainly/czertainly-auth-opa-policies:1.2.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 101
          readinessProbe:
            httpGet:
              path: /index.html
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /index.html
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /var/cache/nginx
              name: ephemeral
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
---
# Source: czertainly/charts/authService/templates/auth-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
  labels:
    helm.sh/chart: authService-1.5.0-2-develop
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: auth-service
        app.kubernetes.io/instance: release-name
      annotations:
        # when the list of the trusted certificates is changed, restart deployment
        checksum/config: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config: 1ae809b6c60865640a33cc3e5f8f25193893d079a030f403cd88d25a7ab42b30
        # when connection string is changed, restart deployment
        checksum/secret: 1bdcfca7b87faf59f56d36290c344c1663a517794e33f6c58b56edd9072d29c2
    spec:      
      containers:
        - name: auth
          image: docker.io/czertainly/czertainly-auth:1.5.0
          imagePullPolicy: IfNotPresent
          env:
            - name: AUTH_CREATE_UNKNOWN_USERS
              value: "true"
            - name: AUTH_CREATE_UNKNOWN_ROLES
              value: "true"
            - name: AUTH_DB_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: connection-string
            - name: ASPNETCORE_URLS
              value: "http://+:8080"
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - name: trusted-certificates-volume
              mountPath: /etc/ssl/certs
              readOnly: true
      volumes:
        - name: trusted-certificates-volume
          secret:
            defaultMode: 420
            secretName: trusted-certificates
---
# Source: czertainly/charts/commonCredentialProvider/templates/common-credential-provider-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: common-credential-provider-deployment
  labels:
    helm.sh/chart: commonCredentialProvider-1.3.3-2-develop
    app.kubernetes.io/name: common-credential-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.3.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: common-credential-provider
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: common-credential-provider
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: common-credential-provider
          image: docker.io/czertainly/czertainly-common-credential-provider:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "8080"
            - name: INCLUDE_ERROR
              value: "always"
            - name: LOGGING_LEVEL_COM_CZERTAINLY
              value: "INFO"
            - name: JAVA_OPTS
              value: ""
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
---
# Source: czertainly/charts/cryptosenseDiscoveryProvider/templates/cryptosense-discovery-provider-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cryptosense-discovery-provider-deployment
  labels:
    helm.sh/chart: cryptosenseDiscoveryProvider-1.4.0-3-develop
    app.kubernetes.io/name: cryptosense-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cryptosense-discovery-provider
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cryptosense-discovery-provider
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: cryptosense-discovery-provider
          image: harbor.3key.company/czertainly/czertainly-cryptosense-discovery-provider:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "8080"
            - name: LOGGING_LEVEL_COM_CZERTAINLY
              value: "INFO"
            - name: JDBC_URL
              value: "jdbc:postgresql://lab09.3key.company:5432/example_czertainly?characterEncoding=UTF-8"
            - name: JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: cryptosense-discovery-provider-secret
                  key: username
            - name: JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cryptosense-discovery-provider-secret
                  key: password
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
---
# Source: czertainly/charts/ctLogsDiscoveryProvider/templates/hashicorp-vault-connector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ct-logs-discovery-provider-deployment
  labels:
    helm.sh/chart: ctLogsDiscoveryProvider-1.0.0-2-develop
    app.kubernetes.io/name: ct-logs-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ct-logs-discovery-provider
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ct-logs-discovery-provider
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: ct-logs-discovery-provider
          image: docker.io/czertainly/czertainly-ct-logs-discovery-provider:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: ct-logs-discovery-provider-secret
                  key: database_host
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: ct-logs-discovery-provider-secret
                  key: database_port
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: ct-logs-discovery-provider-secret
                  key: database_name
            - name: DATABASE_SCHEMA
              value: "ctlogs"
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: ct-logs-discovery-provider-secret
                  key: database_user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ct-logs-discovery-provider-secret
                  key: database_password
            - name: SERVER_PORT
              value: "8080"
            - name: LOG_LEVEL
              value: "DEBUG"
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /v1/health
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /v1/health
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - name: trusted-certificates-volume
              mountPath: /etc/ssl/certs/ca.crt
              subPath: ca.crt
              readOnly: true
      volumes:
        - name: trusted-certificates-volume
          secret:
            defaultMode: 420
            secretName: trusted-certificates
---
# Source: czertainly/charts/feAdministrator/templates/fe-administrator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fe-administrator-deployment
  labels:
    helm.sh/chart: feAdministrator-2.13.1-1-develop
    app.kubernetes.io/name: fe-administrator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.13.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fe-administrator
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fe-administrator
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: fe-administrator
          image: docker.io/czertainly/czertainly-frontend-administrator:2.13.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 101
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - name: fe-administrator-config-volume
              mountPath: /usr/share/nginx/html/config.js
              subPath: config.js
            - mountPath: /var/cache/nginx
              name: ephemeral
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: fe-administrator-config-volume
          configMap:
            name: fe-administrator-configmap
            items:
              - key: config.js
                path: config.js
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
---
# Source: czertainly/charts/keycloakInternal/templates/keycloak-internal-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak-internal-deployment
  labels:
    helm.sh/chart: keycloakInternal-24.0.2-0-3-develop
    app.kubernetes.io/name: keycloak-internal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "24.0.2-0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak-internal
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak-internal
        app.kubernetes.io/instance: release-name
    spec:      
      initContainers:
        - name: init-theme
          image: docker.io/czertainly/czertainly-keycloak-theme:0.1.2
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              cp -a /themes/. /data/
          volumeMounts:
            - mountPath: /data
              name: ephemeral
      containers:
        - name: keycloak-internal
          image: docker.io/3keycompany/czertainly-keycloak-optimized:develop-latest
          imagePullPolicy: IfNotPresent
          args:
            - start
            - --optimized
            - --import-realm
          env:
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: username
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: password
            - name: KC_HOSTNAME_STRICT
              value: "false"
            - name: KC_HOSTNAME_STRICT_HTTPS
              value: "false"
            - name: JAVA_OPTS_APPEND
              value: "-Djgroups.dns.query=keycloak-service-internal-headless"
            - name: KC_PROXY
              value: "edge"
            - name: KC_HTTP_PORT
              value: "8080"
            - name: KC_HTTP_ENABLED
              value: "true"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: KC_DB_SCHEMA
              value: "keycloak"
            # KC_DB_* env variables are needed for Keycloak
            - name: KC_DB_URL
              value: "jdbc:postgresql://lab09.3key.company:5432/example_czertainly?characterEncoding=UTF-8"
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_user
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_password
            - name: KC_LOG_LEVEL
              value: "INFO,org.keycloak.saml:DEBUG,org.keycloak.broker.saml:DEBUG"
            # PG* env variables are needed for psql command which is needed for postStart command
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_host
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_port
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_name
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_user
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-internal-secret
                  key: database_password
          ports:
            - name: http
              containerPort: 8080
              protocol: "TCP"
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          readinessProbe:
            httpGet:
              path: /kc/realms/master
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /kc/realms/master
              port: http
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /opt/keycloak/data
              name: ephemeral
            - name: keycloak-internal-configmap-volume
              mountPath: /opt/keycloak/data/import/czertainly_realm.json
              subPath: czertainly_realm.json
            - name: keycloak-internal-configmap-volume
              mountPath: /opt/keycloak/create_schema.sh
              subPath: create_schema.sh
            - mountPath: /opt/keycloak/themes
              name: ephemeral
            - mountPath: /opt/keycloak/data/tmp
              name: ephemeral
            - mountPath: /tmp
              name: ephemeral
            - name: trusted-certificates-volume
              mountPath: /opt/keycloak/conf/truststores/trusted_cas.pem
              subPath: ca.crt
              readOnly: true
      volumes:
        - name: keycloak-internal-configmap-volume
          configMap:
            name: keycloak-internal-configmap
            items:
              - key: czertainly_realm.json
                path: czertainly_realm.json
              - key: create_schema.sh
                path: create_schema.sh
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "10Mi"
        - name: trusted-certificates-volume
          secret:
            defaultMode: 420
            secretName: trusted-certificates
---
# Source: czertainly/charts/keystoreEntityProvider/templates/keystore-entity-provider-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keystore-entity-provider-deployment
  labels:
    helm.sh/chart: keystoreEntityProvider-1.4.1-3-develop
    app.kubernetes.io/name: keystore-entity-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: keystore-entity-provider
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keystore-entity-provider
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: keystore-entity-provider
          image: docker.io/3keycompany/czertainly-keystore-entity-provider:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "8080"
            - name: LOGGING_LEVEL_COM_CZERTAINLY
              value: "INFO"
            - name: JDBC_URL
              value: "jdbc:postgresql://lab09.3key.company:5432/example_czertainly?characterEncoding=UTF-8"
            - name: JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: keystore-entity-provider-secret
                  key: username
            - name: JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keystore-entity-provider-secret
                  key: password
            - name: JAVA_OPTS
              value: ""
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
---
# Source: czertainly/charts/networkDiscoveryProvider/templates/network-discovery-provider-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-discovery-provider-deployment
  labels:
    helm.sh/chart: networkDiscoveryProvider-1.5.0-2-develop
    app.kubernetes.io/name: network-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: network-discovery-provider
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: network-discovery-provider
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: network-discovery-provider
          image: docker.io/czertainly/czertainly-ip-discovery-provider:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "8080"
            - name: LOGGING_LEVEL_COM_CZERTAINLY
              value: "INFO"
            - name: JDBC_URL
              value: "jdbc:postgresql://lab09.3key.company:5432/example_czertainly?characterEncoding=UTF-8"
            - name: JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: network-discovery-provider-secret
                  key: username
            - name: JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: network-discovery-provider-secret
                  key: password
            - name: JAVA_OPTS
              value: ""
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
---
# Source: czertainly/charts/pyAdcsConnector/templates/pyadcs-connector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pyadcs-connector-deployment
  labels:
    helm.sh/chart: pyAdcsConnector-1.1.2-2-develop
    app.kubernetes.io/name: pyadcs-connector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pyadcs-connector
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pyadcs-connector
        app.kubernetes.io/instance: release-name
      annotations:
        # when the list of the trusted certificates is changed, restart deployment
        checksum/config: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config: 1ae809b6c60865640a33cc3e5f8f25193893d079a030f403cd88d25a7ab42b30
    spec:      
      containers:
        - name: pyadcs-connector
          image: harbor.3key.company/czertainly/czertainly-pyadcs-connector:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: pyadcs-connector-secret
                  key: database_host
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: pyadcs-connector-secret
                  key: database_port
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: pyadcs-connector-secret
                  key: database_name
            - name: DATABASE_SCHEMA
              value: "pyadcs"
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: pyadcs-connector-secret
                  key: database_user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pyadcs-connector-secret
                  key: database_password
            - name: LOG_LEVEL
              value: "INFO"
            - name: REQUESTS_CA_BUNDLE
              value: /etc/ssl/certs/pyadcs-trusted-cas.crt
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /v1
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /v1
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          volumeMounts:
            - mountPath: /tmp
              name: ephemeral
            - name: trusted-certificates-volume
              mountPath: /etc/ssl/certs/pyadcs-trusted-cas.crt
              readOnly: true
              subPath: ca.crt
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
        - name: trusted-certificates-volume
          secret:
            defaultMode: 420
            secretName: trusted-certificates
---
# Source: czertainly/charts/schedulerService/templates/scheduler-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler-service-deployment
  labels:
    helm.sh/chart: schedulerService-1.0.1-2-develop
    app.kubernetes.io/name: scheduler-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: scheduler-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: scheduler-service
        app.kubernetes.io/instance: release-name
      annotations:
        checksum/config: fa8955236979099f2099adda98b21080202a9e3bc869713fbdf4847a83f72f35
    spec:      
      initContainers:
        - name: wait-for-messaging-service
          image: docker.io/curlimages/curl:8.1.1
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 100
          command:
            - /bin/sh
            - -c
            - |
              while ! nc -z messaging-service 5672; do sleep 1; done &&
              echo "messaging service seems to be started"
      containers:
        - name: scheduler-service
          image: docker.io/czertainly/czertainly-scheduler:1.0.1
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "8080"
            - name: LOGGING_LEVEL_COM_CZERTAINLY
              value: "INFO"
            - name: JDBC_URL
              value: "jdbc:postgresql://lab09.3key.company:5432/example_czertainly?characterEncoding=UTF-8"
            - name: JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: scheduler-service-secret
                  key: dbUsername
            - name: JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: scheduler-service-secret
                  key: dbPassword
            - name: JAVA_OPTS
              value: ""
            - name: RABBITMQ_HOST
              value: "messaging-service"
            - name: RABBITMQ_PORT
              value: "5672"
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: scheduler-service-secret
                  key: messagingUsername
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: scheduler-service-secret
                  key: messagingPassword
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
---
# Source: czertainly/charts/softwareCryptographyProvider/templates/software-cryptography-provider-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: software-cryptography-provider-deployment
  labels:
    helm.sh/chart: softwareCryptographyProvider-1.2.2-2-develop
    app.kubernetes.io/name: software-cryptography-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: software-cryptography-provider
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: software-cryptography-provider
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: software-cryptography-provider
          image: docker.io/3keycompany/czertainly-software-cryptography-provider:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "8080"
            - name: LOGGING_LEVEL_COM_CZERTAINLY
              value: "INFO"
            - name: JDBC_URL
              value: "jdbc:postgresql://lab09.3key.company:5432/example_czertainly?characterEncoding=UTF-8"
            - name: JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: software-cryptography-provider-secret
                  key: username
            - name: JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: software-cryptography-provider-secret
                  key: password
            - name: TOKEN_DELETE_ON_REMOVE
              value: "false"
            - name: JAVA_OPTS
              value: ""
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /tmp
              name: ephemeral
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
---
# Source: czertainly/charts/x509ComplianceProvider/templates/x509-compliance-provider-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: x509-compliance-provider-deployment
  labels:
    helm.sh/chart: x509ComplianceProvider-1.3.0-4-develop
    app.kubernetes.io/name: x509-compliance-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: x509-compliance-provider
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: x509-compliance-provider
        app.kubernetes.io/instance: release-name
    spec:      
      containers:
        - name: x509-compliance-provider
          image: docker.io/3keycompany/czertainly-x509-compliance-provider:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: SERVER_PORT
              value: "8080"
            - name: LOG_LEVEL
              value: "INFO"
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /v1/health
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /v1/health
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
---
# Source: czertainly/templates/core-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-deployment
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: czertainly
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: czertainly
        app.kubernetes.io/instance: release-name
      annotations:
        # annotation for vault-agent
        # when the list of the trusted certificates is changed, restart deployment
        checksum/config: e2b99112760476b03c266f5d87afef924e6d2e9a487059ebd45b767f494a8827
        # when the messaging secrets are changed, restart deployment
        checksum/mq-secret: 00222c4333fe1c94e6ec7d196bb9440f24455aa2d7686de85b08d82e6a46f868
    spec:      
      initContainers:
        - name: wait-for-auth-service
          image: docker.io/curlimages/curl:8.1.1
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 100
          command:
            - /bin/sh
            - -c
            - |
              while ! nc -z auth-service 8080; do sleep 1; done &&
              while ! nc -z auth-opa-policies-service 8080; do sleep 1; done &&
              echo "auth service seems to be started" &&
              while ! nc -z messaging-service 5672; do sleep 1; done &&
              while ! nc -z scheduler-service-service 8080; do sleep 1; done &&
              echo "messaging and scheduler service seems to be started"
      containers:
        - name: czertainly-auth-opa
          image: docker.io/openpolicyagent/opa:0.53.0-rootless
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8181
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          readinessProbe:
            httpGet:
              path: /health?bundle=true
              scheme: HTTP
              port: 8181
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          args:
            - "run"
            - "--server"
            - "--set=services.nginx.url=http://auth-opa-policies-service:8080"
            - "--set=bundles.nginx.service=nginx"
            - "--set=bundles.nginx.resource=bundles/bundle.tar.gz"
        - name: czertainly-core
          image: docker.io/czertainly/czertainly-core:develop-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: HEADER_ENABLED
              value: "true"
            - name: HEADER_NAME
              value: "ssl-client-cert"
            - name: JDBC_URL
              value: "jdbc:postgresql://lab09.3key.company:5432/example_czertainly?characterEncoding=UTF-8"
            - name: JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: core-secret
                  key: jdbcUsername
            - name: JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: core-secret
                  key: jdbcPassword
            - name: LOGGING_LEVEL_COM_CZERTAINLY
              value: "INFO"
            - name: ADMIN_CERT
              valueFrom:
                secretKeyRef:
                  name: admin-certificate-secret
                  key: tls.crt
            - name: OPA_BASE_URL
              value: "http://localhost:8181"
            - name: AUTH_SERVICE_BASE_URL
              value: "http://auth-service:8080"
            - name: TRUSTED_CERTIFICATES
              valueFrom:
                secretKeyRef:
                  name: trusted-certificates
                  key: ca.crt
            - name: JAVA_OPTS
              value: ""
            - name: RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: global-configmap
                  key: messaging.host
            - name: RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: global-configmap
                  key: messaging.amqp.port
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: global-secret
                  key: messaging.username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: global-secret
                  key: messaging.password
            - name: SCHEDULER_BASE_URL
              value: "http://scheduler-service-service:8080"
            - name: INTERNAL_OAUTH_SECRET
              value: "example"
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
          readinessProbe:
            httpGet:
              path: /api/v1/health/readiness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /api/v1/health/liveness
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            - mountPath: /tmp
              name: ephemeral
            - mountPath: /opt/czertainly/scripts
              name: core-scripts
          lifecycle:
            postStart:
              exec:
                command:
                  - "sh"
                  - "-c"
                  - |
                    /opt/czertainly/scripts/register-admin.sh;
                    /opt/czertainly/scripts/register-internal-keycloak.sh $INTERNAL_OAUTH_SECRET;
      volumes:
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
        - name: core-scripts
          configMap:
            name: core-scripts-configmap
            defaultMode: 0777
---
# Source: czertainly/charts/messagingService/templates/messaging-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: messaging-statefulset
  labels:
    helm.sh/chart: messagingService-3.12.1-4-develop
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.12.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: messaging-service
      app.kubernetes.io/instance: release-name
  # headless service that gives network identity to the RMQ nodes, and enables them to cluster
  serviceName: messaging-service-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/name: messaging-service
        app.kubernetes.io/instance: release-name
      annotations:
        # when the messaging config map is changed, restart deployment
        checksum/config: 377985e662119e517b6499a1faec8b3b5e986cc54a13fd631ca6a5051f44510c
        # when the messaging secret is changed, restart deployment
        checksum/secret: dc1b3ad859c294be121fe29ab5707eaa422b3de80c99e23a32fe2d826f6395d4
    spec:      
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsUser: 999
      serviceAccountName: messaging-rabbitmq-sa
      #initContainers:
        # Since k8s 1.9.4, config maps mount read-only volumes. Since the Docker image also writes to the config file,
        # the file must be mounted as read-write. We use init containers to copy from the config map read-only
        # path, to a read-write path
      #  - name: rabbitmq-config
      #    image: busybox:1.32.0
      #    volumeMounts:
      #      - name: configuration
      #        mountPath: /tmp/rabbitmq
      #      - name: rabbitmq-config-rw
      #        mountPath: /etc/rabbitmq
      #    command:
      #      - sh
      #      - -c
            # the newline is needed since the Docker image entrypoint scripts appends to the config file
      #      - cp /tmp/rabbitmq/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf && echo '' >> /etc/rabbitmq/rabbitmq.conf;
      #        cp /tmp/rabbitmq/enabled_plugins /etc/rabbitmq/enabled_plugins
      containers:
        - name: rabbitmq
          image: docker.io/rabbitmq:3.12.1
          imagePullPolicy: IfNotPresent
          env:
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                secretKeyRef:
                  name: global-secret
                  key: messaging.password
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                secretKeyRef:
                  name: global-secret
                  key: messaging.username
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: global-secret
                  key: messaging.cookie
            - name: RABBITMQ_LOGS
              value: "-"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "messaging-service-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: "-rabbitmq_management load_definitions '/tmp/definitions.json'"
          ports:
            - name: amqp
              containerPort: 5672
              protocol: "TCP"
            - name: management
              containerPort: 15672
              protocol: "TCP"
            - name: epmd
              containerPort: 4369
              protocol: "TCP"
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 999
          # probe to know when RabbitMQ is ready to accept traffic
          readinessProbe:
            exec:
              command: [ "rabbitmq-diagnostics", "ping" ]
            initialDelaySeconds: 10
            timeoutSeconds: 20
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            exec:
              command: [ "rabbitmq-diagnostics", "ping" ]
            initialDelaySeconds: 15
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 45
          volumeMounts:
            #- name: rabbitmq-config-rw
            #  mountPath: "/etc/rabbitmq"
              # mountPath: "/etc/rabbitmq/conf.d/"
            # mounting rabbitmq.conf and enabled_plugins
            - name: configuration
              mountPath: "/etc/rabbitmq"
            #   # mountPath: "/etc/rabbitmq/conf.d/"
            # rabbitmq data directory
            - name: data
              mountPath: "/var/lib/rabbitmq/mnesia"
              subPath: rabbitmq
            # there is a bug in the Docker image that prevents upgrade logs from being written to stdout
            - name: definitions
              mountPath: "/tmp"
            - mountPath: /var/log/rabbitmq
              name: ephemeral
      volumes:
        - name: configuration
          configMap:
            name: global-configmap
            optional: false
            items:
              - key: messaging.rabbitmq.conf
                path: "rabbitmq.conf"
              - key: messaging.enabled_plugins
                path: "enabled_plugins"
        - name: definitions
          secret:
            secretName: global-secret
            optional: false
            items:
              - key: messaging.definitions.json
                path: "definitions.json"
        - name: ephemeral          
          emptyDir:
            medium: "Memory"
            sizeLimit: "1Mi"
        #- name: rabbitmq-config-rw
        #  emptyDir: { }
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: messaging-service
          app.kubernetes.io/instance: release-name
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "100Mi"
---
# Source: czertainly/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-czertainly
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/issuer: ca-issuer
    cert-manager.io/issuer-kind: Issuer
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    nginx.ingress.kubernetes.io/auth-tls-secret: czertainly-example/trusted-certificates
    nginx.ingress.kubernetes.io/auth-tls-verify-client: optional
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "3"
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/proxy-buffer-size: 256k
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  tls:
    - hosts:
      - semik66.3key.company
      secretName: czertainly-ingress-tls
  rules:
    - host: semik66.3key.company
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: api-gateway-service
                port:
                  number: 8000
---
# Source: czertainly/templates/ingress/ca-issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: ca-issuer
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: info@3key.company
    privateKeySecretRef:
      name: letsencrypt-production
    solvers:
      - http01:
          ingress:
            class: nginx
---
# Source: czertainly/charts/apiGateway/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-api-gateway-test-connection"
  labels:
    helm.sh/chart: apiGateway-3.8.0-develop
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.8.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors api-gateway-service:8001
  restartPolicy: Never
---
# Source: czertainly/charts/authOpaPolicies/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-auth-opa-policies-test-connection"
  labels:
    helm.sh/chart: authOpaPolicies-1.2.1-2-develop
    app.kubernetes.io/name: auth-opa-policies
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.2.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors auth-opa-policies-service:8080
  restartPolicy: Never
---
# Source: czertainly/charts/authService/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-auth-service-test-connection"
  labels:
    helm.sh/chart: authService-1.5.0-2-develop
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors auth-service:8080/health
  restartPolicy: Never
---
# Source: czertainly/charts/commonCredentialProvider/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-common-credential-provider-test-connection"
  labels:
    helm.sh/chart: commonCredentialProvider-1.3.3-2-develop
    app.kubernetes.io/name: common-credential-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.3.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors common-credential-provider-service:8080/v1
  restartPolicy: Never
---
# Source: czertainly/charts/cryptosenseDiscoveryProvider/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-cryptosense-discovery-provider-test-connection"
  labels:
    helm.sh/chart: cryptosenseDiscoveryProvider-1.4.0-3-develop
    app.kubernetes.io/name: cryptosense-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors cryptosense-discovery-provider-service:8080/v1
  restartPolicy: Never
---
# Source: czertainly/charts/ctLogsDiscoveryProvider/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-ct-logs-discovery-provider-test-connection"
  labels:
    helm.sh/chart: ctLogsDiscoveryProvider-1.0.0-2-develop
    app.kubernetes.io/name: ct-logs-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors ct-logs-discovery-provider-service:8080/v1
  restartPolicy: Never
---
# Source: czertainly/charts/feAdministrator/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-fe-administrator-test-connection"
  labels:
    helm.sh/chart: feAdministrator-2.13.1-1-develop
    app.kubernetes.io/name: fe-administrator
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.13.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors fe-administrator-service:8080/index.html
  restartPolicy: Never
---
# Source: czertainly/charts/keycloakInternal/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-keycloak-internal-test-connection"
  labels:
    helm.sh/chart: keycloakInternal-24.0.2-0-3-develop
    app.kubernetes.io/name: keycloak-internal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "24.0.2-0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors keycloak-internal-service:8080
  restartPolicy: Never
---
# Source: czertainly/charts/keystoreEntityProvider/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-keystore-entity-provider-test-connection"
  labels:
    helm.sh/chart: keystoreEntityProvider-1.4.1-3-develop
    app.kubernetes.io/name: keystore-entity-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.4.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors keystore-entity-provider-service:8080/v1
  restartPolicy: Never
---
# Source: czertainly/charts/messagingService/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-messaging-service-test-connection"
  labels:
    helm.sh/chart: messagingService-3.12.1-4-develop
    app.kubernetes.io/name: messaging-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "3.12.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl -u czertainly: --retry 10 --retry-delay 5 --retry-all-errors messaging-service:15672/api
  restartPolicy: Never
---
# Source: czertainly/charts/networkDiscoveryProvider/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-network-discovery-provider-test-connection"
  labels:
    helm.sh/chart: networkDiscoveryProvider-1.5.0-2-develop
    app.kubernetes.io/name: network-discovery-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors network-discovery-provider-service:8080/v1
  restartPolicy: Never
---
# Source: czertainly/charts/pyAdcsConnector/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-pyadcs-connector-test-connection"
  labels:
    helm.sh/chart: pyAdcsConnector-1.1.2-2-develop
    app.kubernetes.io/name: pyadcs-connector
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors pyadcs-connector-service:8080/v1
  restartPolicy: Never
---
# Source: czertainly/charts/schedulerService/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-scheduler-service-test-connection"
  labels:
    helm.sh/chart: schedulerService-1.0.1-2-develop
    app.kubernetes.io/name: scheduler-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors scheduler-service-service:8080/health/liveness
  restartPolicy: Never
---
# Source: czertainly/charts/softwareCryptographyProvider/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-software-cryptography-provider-test-connection"
  labels:
    helm.sh/chart: softwareCryptographyProvider-1.2.2-2-develop
    app.kubernetes.io/name: software-cryptography-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors software-cryptography-provider-service:8080/v1
  restartPolicy: Never
---
# Source: czertainly/charts/x509ComplianceProvider/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-x509-compliance-provider-test-connection"
  labels:
    helm.sh/chart: x509ComplianceProvider-1.3.0-4-develop
    app.kubernetes.io/name: x509-compliance-provider
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 5 --retry-delay 5 --retry-all-errors x509-compliance-provider-service:8080/v1
  restartPolicy: Never
---
# Source: czertainly/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-czertainly-test-connection"
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl:8.1.1
      command:
        - /bin/sh
        - -c
        - |
          curl --silent --retry 10 --retry-delay 5 --retry-all-errors core-service:8080/api/v1/health/liveness
  restartPolicy: Never
---
# Source: czertainly/templates/hooks/register-connectors-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "release-name-register-admin-job"
  labels:
    helm.sh/chart: czertainly-2.14.0-develop
    app.kubernetes.io/name: czertainly
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: "czertainly-2.14.0-develop"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "release-name-register-admin-job"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "release-name"
        helm.sh/chart: "czertainly-2.14.0-develop"
    spec:      
      restartPolicy: Never
      containers:
        - name: register-admin-job
          image: docker.io/curlimages/curl:8.1.1
          imagePullPolicy: IfNotPresent
          command:
          - /bin/sh
          - -c
          - |
            while ! nc -z core-service 8080; do sleep 1; done &&
            curl -X POST -k -H 'content-type: application/json' \
            -d '{"name": "Common-Credential-Connector","url": "http://common-credential-provider-service:8080","authType": "none"}' \
            http://core-service:8080/api/v1/connector/register &&
            curl -X POST -k -H 'content-type: application/json' \
            -d '{"name": "Cryptosense-Discovery-Provider","url": "http://cryptosense-discovery-provider-service:8080","authType": "none"}' \
            http://core-service:8080/api/v1/connector/register &&
            curl -X POST -k -H 'content-type: application/json' \
            -d '{"name": "X509-Compliance-Provider","url": "http://x509-compliance-provider-service:8080","authType": "none"}' \
            http://core-service:8080/api/v1/connector/register &&
            curl -X POST -k -H 'content-type: application/json' \
            -d '{"name": "Network-Discovery-Provider","url": "http://network-discovery-provider-service:8080","authType": "none"}' \
            http://core-service:8080/api/v1/connector/register &&
            curl -X POST -k -H 'content-type: application/json' \
            -d '{"name": "Keystore-Entity-Provider","url": "http://keystore-entity-provider-service:8080","authType": "none"}' \
            http://core-service:8080/api/v1/connector/register &&
            curl -X POST -k -H 'content-type: application/json' \
            -d '{"name": "Software-Cryptography-Provider","url": "http://software-cryptography-provider-service:8080","authType": "none"}' \
            http://core-service:8080/api/v1/connector/register &&
            curl -X POST -k -H 'content-type: application/json' \
            -d '{"name": "PyADCS-Connector","url": "http://pyadcs-connector-service:8080","authType": "none"}' \
            http://core-service:8080/api/v1/connector/register &&
            curl -X POST -k -H 'content-type: application/json' \
            -d '{"name": "CT-Logs-Discovery-Provider","url": "http://ct-logs-discovery-provider-service:8080","authType": "none"}' \
            http://core-service:8080/api/v1/connector/register &&
            echo "all done"
